package com.xjgc.wind.datastatistics.web.action;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.math.NumberUtils;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.xjgc.wind.datastatistics.service.IWindFaultCountsService;
import com.xjgc.wind.datastatistics.service.IGeneratorService;
import com.xjgc.wind.datastatistics.vo.DataStatisticsDataVo;
import com.xjgc.wind.datastatistics.web.form.PowerScatterDataForm;
import com.xjgc.wind.datastatistics.web.form.WindFaultCountsDataForm;
import com.xjgc.wind.querytree.vo.ResultVO;

public class WindFaultCountsDataAction extends DispatchAction{

	private static final Log log = LogFactory.getLog(WindFaultCountsDataAction.class);
	
	IWindFaultCountsService windFaultCountsService;
	IGeneratorService generatorService;
	
	public void setServlet(ActionServlet servlet) {
		super.setServlet(servlet);

		WebApplicationContext wac = WebApplicationContextUtils
		.getRequiredWebApplicationContext(servlet.getServletContext());
		
		windFaultCountsService = (IWindFaultCountsService) wac.getBean("windFaultCountsService");
		generatorService = (IGeneratorService) wac.getBean("generatorService");
	} 
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'execute' method ...");

		String method = request.getParameter("method");
		if (StringUtils.isBlank(method))
			return show(mapping, form, request, response);
		else
			return super.execute(mapping, form, request, response);
	}
	
	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'show' method ...");
		
		WindFaultCountsDataForm dataForm = (WindFaultCountsDataForm) form;
		List<DataStatisticsDataVo> result =null;
		List<DataStatisticsDataVo> resultGen =null;
		List<DataStatisticsDataVo> resultCount = new ArrayList<DataStatisticsDataVo>() ;
		if (!StringUtils.isEmpty(request.getParameter("isFirst"))) {
			String str=dataForm.getStr();
			String[] arr =null;
			arr = str.split(",");
			int size=arr.length;
			result = windFaultCountsService.list(dataForm);
			
			resultGen = generatorService.list();
			
			
			
			
			
			if(result.size()> 1&&resultGen.size()> 1){
				int countWind=0;
			    String  nameWind = null;
			for(int i=0;i<size;i++){
				//得到故障条数
				for(int j=0;j<result.size();j++){
					if(Integer.parseInt(arr[i].substring(arr[i].lastIndexOf("-")+1,arr[i].length()))==result.get(j).getEquipId()){
						countWind=countWind+1;	
					}
				}
				
			     //得到风机名称		
			    for(int m=0;m<resultGen.size();m++){
						if(Integer.parseInt(arr[i].substring(arr[i].lastIndexOf("-")+1,arr[i].length()))==resultGen.get(m).getId()){
							nameWind=resultGen.get(m).getName();	
						}
			    }
			    DataStatisticsDataVo dataStatisticsDataVo=new DataStatisticsDataVo();
			    dataStatisticsDataVo.setCount(countWind);
				dataStatisticsDataVo.setName(nameWind);
				resultCount.add(dataStatisticsDataVo);
				
			
			}
			
			}
			
			request.setAttribute("resultCount", resultCount);
			
		}

	
		lineChartXml(resultCount, request);
		
		return mapping.findForward("show");
	}
	
private void lineChartXml(List<DataStatisticsDataVo> list, HttpServletRequest request) {
		
		if (list != null && !list.isEmpty()) {
			StringBuffer barXml = new StringBuffer();
			barXml.append("[");
			
			Iterator<DataStatisticsDataVo> iter = list.iterator();
			while (iter.hasNext()) {
				DataStatisticsDataVo elem = iter.next();
				
				barXml.append("{").append("name").append(":\"").append(elem.getName());
				barXml.append("\",").append("count").append(":\"").append(elem.getCount());
				barXml.append("\"},");
			}
			barXml.append("]");
			
			if (barXml.length() > 0) 
				request.setAttribute("barXml", barXml);
		}
		else
		{
			StringBuffer barXml = new StringBuffer();
			barXml.append("[{").append("name").append(":\"").append(0);
			barXml.append("\",").append("count").append(":\"").append(0).append("\"}]");
			
			request.setAttribute("barXml", barXml);
		}
	}
}
