package com.xjgc.wind.datastatistics.web.action;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.xjgc.wind.datastatistics.service.IGeneratStatisticsService;
import com.xjgc.wind.datastatistics.service.IGeneratorStatisticsDayReportService;
import com.xjgc.wind.datastatistics.vo.DataStatisticsDataVo;
import com.xjgc.wind.datastatistics.vo.GeneratorStatisticsReportVo;
import com.xjgc.wind.datastatistics.web.form.GeneratStatisticsDataForm;
import com.xjgc.wind.datastatistics.web.form.GeneratorStatisticsDayReportDataForm;
import com.xjgc.wind.util.HourMTimeUtil;



public class GeneratorStatisticsDayReportDataAction extends DispatchAction {

	private static final Log log = LogFactory.getLog(GeneratorStatisticsDayReportDataAction.class);

	IGeneratorStatisticsDayReportService generatorStatisticsDayReportService;

	public void setServlet(ActionServlet servlet) {
		super.setServlet(servlet);

		WebApplicationContext wac = WebApplicationContextUtils
		.getRequiredWebApplicationContext(servlet.getServletContext());
		generatorStatisticsDayReportService = (IGeneratorStatisticsDayReportService) wac.getBean("generatorStatisticsDayReportService");	

	}

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'execute' method ...");

		String method = request.getParameter("method");
		if (StringUtils.isBlank(method))
			return show(mapping, form, request, response);
		else
			return super.execute(mapping, form, request, response);
	}


	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'show' method ...");


		GeneratorStatisticsDayReportDataForm dataForm = (GeneratorStatisticsDayReportDataForm) form;
		List<GeneratorStatisticsReportVo> result =null;
		List<GeneratorStatisticsReportVo> resultYesterday =null;
		List<GeneratorStatisticsReportVo> resultWind=null;
		if (!StringUtils.isEmpty(request.getParameter("isFirst"))) {	
			result=generatorStatisticsDayReportService.list(dataForm.getDateDisp());
			resultYesterday=generatorStatisticsDayReportService.listyesterday(dataForm.getDateDisp());
			resultWind=generatorStatisticsDayReportService.listWind(dataForm.getDateDisp());
			//System.out.println(resultWind.get(0).getHours());
			if(result.size()!=0&&resultYesterday.size()!=0){
				for(int i=0;i<result.size();i++){
					result.get(i).setLftHour(result.get(i).getLftHour()-resultYesterday.get(i).getLftHour());
					result.get(i).setRtghHour(result.get(i).getRtghHour()-resultYesterday.get(i).getRtghHour());
					result.get(i).setYawHour(result.get(i).getYawHour()-resultYesterday.get(i).getYawHour());
					result.get(i).setLftYawMotorCWCou(result.get(i).getLftYawMotorCWCou()-resultYesterday.get(i).getLftYawMotorCWCou());
					result.get(i).setRtghYawMotorCCWCou(result.get(i).getRtghYawMotorCCWCou()-resultYesterday.get(i).getRtghYawMotorCCWCou());
					result.get(i).setYawCWCou(result.get(i).getYawCWCou()-resultYesterday.get(i).getYawCWCou());
					result.get(i).setWinTurStCovCont(result.get(i).getWinTurStCovCont()-resultYesterday.get(i).getWinTurStCovCont());
					result.get(i).setSerModTimes(result.get(i).getSerModTimes()-resultYesterday.get(i).getSerModTimes());
					result.get(i).setWinTurErrCovCont(result.get(i).getWinTurErrCovCont()-resultYesterday.get(i).getWinTurErrCovCont());
					result.get(i).setConvMaiSwitchCou(result.get(i).getConvMaiSwitchCou()-resultYesterday.get(i).getConvMaiSwitchCou());
					result.get(i).setWinHigErrTimes(result.get(i).getWinHigErrTimes()-resultYesterday.get(i).getWinHigErrTimes());
					result.get(i).setWinTurCatInCont(result.get(i).getWinTurCatInCont()-resultYesterday.get(i).getWinTurCatInCont());
					result.get(i).setWinTurArtStpCont(result.get(i).getWinTurArtStpCont()-resultYesterday.get(i).getWinTurArtStpCont());
				 
				}
			}
			for(int i=0;i<result.size();i++){
				for(int j=0;j<resultWind.size();j++){
					if(resultWind.get(j).getId()==result.get(i).getId()){
						result.get(i).setHours(resultWind.get(j).getHours());
					}
				}
				
			}
			
		}
		
		request.setAttribute("result", result);
		return mapping.findForward("show");
		
	}
	

	
	
}








