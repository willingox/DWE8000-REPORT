package com.xjgc.wind.datastatistics.web.action;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.xjgc.wind.datastatistics.service.IWindGenwhService;
import com.xjgc.wind.datastatistics.service.IGeneratorService;
import com.xjgc.wind.datastatistics.vo.DataStatisticsDataVo;
import com.xjgc.wind.datastatistics.web.form.WindGenwhDataForm;
import com.xjgc.wind.datastatistics.web.form.GeneratorDataForm;

public class WindGenwhDataAction extends DispatchAction{

	private static final Log log = LogFactory.getLog(WindGenwhDataAction.class);
	
	IWindGenwhService windGenwhService;
	IGeneratorService generatorService;
	
	public void setServlet(ActionServlet servlet) {
		super.setServlet(servlet);

		WebApplicationContext wac = WebApplicationContextUtils
		.getRequiredWebApplicationContext(servlet.getServletContext());
		windGenwhService = (IWindGenwhService) wac.getBean("windGenwhService");
		generatorService = (IGeneratorService) wac.getBean("generatorService");
	}
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'execute' method ...");

		String method = request.getParameter("method");
		if (StringUtils.isBlank(method))
			return show(mapping, form, request, response);
		else
			return super.execute(mapping, form, request, response);
	}
	
	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'show' method ...");
		
		WindGenwhDataForm dataForm = (WindGenwhDataForm) form;
	/*	if (StringUtils.isEmpty(request.getParameter("isFirst"))) {
			// ��һ�ν��뱾ҳ��ʱ
			Calendar today2 = GregorianCalendar.getInstance();
			Calendar today1 = GregorianCalendar.getInstance();
			today1.add(Calendar.DATE,-1);
			String strToday1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today1.getTime());
			String strToday2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today2.getTime());
			dataForm.setStartDateDisp(strToday1);
			dataForm.setEndDateDisp(strToday2);
		}*/

		// ��ѯ���
		List<DataStatisticsDataVo> resultg =null;
		if (!StringUtils.isEmpty(request.getParameter("isFirst"))) {
			resultg = windGenwhService.list(dataForm);
			int size = resultg.size();
			if(size >0)
			{
				for(int i = 0;i < size;i++){
					double f0   = resultg.get(i).getTotalGenwh(); 
					BigDecimal   b   =   new   BigDecimal(f0);  
					double f1  =   b.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					resultg.get(i).setTotalGenwh(f1);
				}
			}
			
			
			
			
			
		}
		
		StringBuffer buffer = new StringBuffer(); 
		buffer.append("<tr style='text-align:center;'>");
		buffer.append("<td colspan='1'>风机名称</td>");
		buffer.append("<td colspan='1'>发电量(").append("kWh").append(")</td>");
		buffer.append("</tr>");
		
		request.setAttribute("resultg", resultg);
		request.setAttribute("top", buffer.toString());
		lineChartXml(resultg, request);
		
		return mapping.findForward("show");
	}

	private void lineChartXml(List<DataStatisticsDataVo> list, HttpServletRequest request) {
		
		if (list != null && !list.isEmpty()) {
			StringBuffer barXml = new StringBuffer();
			barXml.append("[");
			
			Iterator<DataStatisticsDataVo> iter = list.iterator();
			while (iter.hasNext()) {
				DataStatisticsDataVo elem = iter.next();
				
				barXml.append("{").append("name").append(":\"").append(elem.getName());
				barXml.append("\",").append("totalgenwh").append(":\"").append(elem.getTotalGenwh());
				barXml.append("\"},");
			}
			barXml.append("]");
			
			if (barXml.length() > 0) 
				request.setAttribute("barXml", barXml);
		}
		else
		{
			StringBuffer barXml = new StringBuffer();
			barXml.append("[{").append("name").append(":\"").append(0);
			barXml.append("\",").append("totalgenwh").append(":\"").append(0).append("\"}]");
			
			request.setAttribute("barXml", barXml);
		}
	}
} 
