package com.xjgc.wind.datastatistics.web.action;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;



import com.xjgc.wind.datastatistics.service.IGeneratorStatisticsMonReportService;
import com.xjgc.wind.datastatistics.vo.GeneratorStatisticsReportVo;
import com.xjgc.wind.datastatistics.web.form.GeneratorStatisticsMonReportDataForm;



public class GeneratorStatisticsMonReportDataAction extends DispatchAction {

	private static final Log log = LogFactory.getLog(GeneratorStatisticsMonReportDataAction.class);

	IGeneratorStatisticsMonReportService generatorStatisticsMonReportService;

	public void setServlet(ActionServlet servlet) {
		super.setServlet(servlet);

		WebApplicationContext wac = WebApplicationContextUtils
		.getRequiredWebApplicationContext(servlet.getServletContext());
		generatorStatisticsMonReportService = (IGeneratorStatisticsMonReportService) wac.getBean("generatorStatisticsMonReportService");	

	}

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'execute' method ...");

		String method = request.getParameter("method");
		if (StringUtils.isBlank(method))
			return show(mapping, form, request, response);
		else
			return super.execute(mapping, form, request, response);
	}


	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'show' method ...");


		GeneratorStatisticsMonReportDataForm dataForm = (GeneratorStatisticsMonReportDataForm) form;
		List<GeneratorStatisticsReportVo> result =null;
		List<GeneratorStatisticsReportVo> resultWind =null;
		if (!StringUtils.isEmpty(request.getParameter("isFirst"))) {	
			result=generatorStatisticsMonReportService.list(dataForm.getDateDisp());
			resultWind=generatorStatisticsMonReportService.listWind(dataForm.getDateDisp());
			for(int i=0;i<result.size();i++){
				for(int j=0;j<resultWind.size();j++){
					if(resultWind.get(j).getId()==result.get(i).getId()){
						result.get(i).setHours(resultWind.get(j).getHours());
					}
				}
				
			}
		
			request.setAttribute("result", result);	
		}
		
		
		return mapping.findForward("show");
		
	}
	

	
	
}








