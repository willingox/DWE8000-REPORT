package com.xjgc.wind.datastatistics.web.action;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.xjgc.wind.datastatistics.service.IGeneratorService;
import com.xjgc.wind.datastatistics.service.IWindSpeedService;
import com.xjgc.wind.datastatistics.vo.DataStatisticsDataVo;
import com.xjgc.wind.datastatistics.web.form.WindSpeedDataForm;
import com.xjgc.wind.util.YMDHMSUtil;

public class WindSpeedDataAction extends DispatchAction{

private static final Log log = LogFactory.getLog(WindGenwhDataAction.class);
	
 	IWindSpeedService windSpeedService;
 	IGeneratorService generatorService;
	
	public void setServlet(ActionServlet servlet) {
		super.setServlet(servlet);

		WebApplicationContext wac = WebApplicationContextUtils
		.getRequiredWebApplicationContext(servlet.getServletContext());
		windSpeedService = (IWindSpeedService) wac.getBean("windSpeedService");
		generatorService = (IGeneratorService) wac.getBean("generatorService");
	}
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'execute' method ...");

		String method = request.getParameter("method");
		if (StringUtils.isBlank(method))
			return show(mapping, form, request, response);
		else
			return super.execute(mapping, form, request, response);
	}
	
	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isDebugEnabled())
			log.debug("entering 'show' method ...");
		
		WindSpeedDataForm dataForm = (WindSpeedDataForm) form;
		List<DataStatisticsDataVo> result =null;
		List<DataStatisticsDataVo> resultavg =null;
		if (!StringUtils.isEmpty(request.getParameter("isFirst"))) {
			
			result = windSpeedService.list(dataForm);
			resultavg = windSpeedService.listavg(dataForm);
			double avgWindSpeed=0;
			if(resultavg.size()>0){
				for(int i = 0;i < resultavg.size();i++){
				avgWindSpeed+=resultavg.get(i).getAvgWindVelval();
				}
				avgWindSpeed=avgWindSpeed/resultavg.size();
			}
			
			avgWindSpeed=(new BigDecimal(avgWindSpeed)).setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
			
			int size = result.size();
			if(size >0)
			{
				for(int i = 0;i < size;i++){
					double f0   = result.get(i).getAvgWindVelval();
					BigDecimal   b   =   new   BigDecimal(f0);  
					double f1  =   b.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					result.get(i).setAvgWindVelval(f1);
					
					double f2   = result.get(i).getMaxData();
					BigDecimal   b1   =   new   BigDecimal(f2);  
					double f3  =   b1.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					result.get(i).setMaxData(f3);
					
					double f4   = result.get(i).getMinData();
					BigDecimal   b2   =   new   BigDecimal(f4);  
					double f5  =   b2.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					result.get(i).setMinData(f5);
					
				}
			}
			
		/*	if(resultavg.size() >0)
			{
				for(int i = 0;i < resultavg.size();i++){
					double f0   = resultavg.get(i).getWindPower();
					BigDecimal   b   =   new   BigDecimal(f0);  
					double f1  =   b.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					resultavg.get(i).setWindPower(f1);
					
					double f2   = resultavg.get(i).getMaxData();
					BigDecimal   b2   =   new   BigDecimal(f2);  
					double f3  =   b2.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					resultavg.get(i).setMaxData(f3);

					double f4   = resultavg.get(i).getMinData();
					BigDecimal   b3   =   new   BigDecimal(f4);  
					double f5 =   b3.setScale(2,   BigDecimal.ROUND_HALF_UP).doubleValue();
					resultavg.get(i).setMinData(f5);

				}
			}*/
			
			request.setAttribute("result", result);
			request.setAttribute("avgWindSpeed", avgWindSpeed);
		}

	
		
		
		
		lineChartXml(result, request);
		
		return mapping.findForward("show");
	}

	private void lineChartXml(List<DataStatisticsDataVo> list, HttpServletRequest request) {
		
		if (list != null && !list.isEmpty()) {
			StringBuffer barXml = new StringBuffer();
			barXml.append("[");
			
			Iterator<DataStatisticsDataVo> iter = list.iterator();
			while (iter.hasNext()) {
				DataStatisticsDataVo elem = iter.next();
				//if(elem.getSaveTime().toString().contains(":15:00") || elem.getSaveTime().toString().contains(":30:00")
					//	|| elem.getSaveTime().toString().contains(":45:00") || elem.getSaveTime().toString().contains(":00:00"))
				{
					barXml.append("{").append("name").append(":\"").append(elem.getName());
					barXml.append("\",").append("avgwindval").append(":\"").append(elem.getAvgWindVelval());
					barXml.append("\"},");
					
				}
			}
			barXml.append("]");
			
			if (barXml.length() > 0) 
				request.setAttribute("barXml", barXml);
		}
		else
		{
			StringBuffer barXml = new StringBuffer();
			barXml.append("[{").append("name").append(":\"").append(0);
			barXml.append("\",").append("avgwindval").append(":\"").append(0).append("\"}]");
			
			request.setAttribute("barXml", barXml);
		}
	}
}
